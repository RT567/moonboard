{"version":3,"sources":["my_app2/events.cljs"],"mappings":";AAOA,yDAAA,zDAACA,2JAEA,WAAKC,EAAEA;AAAP,AACEC;;AAEH,6BAAA,7BAAMC,kEAAaC,MAAMC;AAAzB,AACE,GACE,AAACC,cAAI,eAAA,fAACC,8DAAOH,QAAOC;AAAM,OAACG,6CAAKH,IAAID;;AADtC,AAEQ,sDAAA,/CAACK,8FAASL,QAAOC;;;;AAE3B,yDAAA,zDAACL,8HAEA,cAAAU,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASV;WAAT,AAAAW,4CAAAD,WAAA,IAAA,lEAAWG;AAAX,AACE,IAAMC,UAAQ,AAAA,sGAAiBF;IACzBG,WAAS,AAACb,2BAAYW,KAAKC;AADjC,AAEE,wDAAA,jDAACE,8CAAMJ,2EAAmBG;;AAE/B,yDAAA,zDAAChB,4HAEA,WAAKa,GAAGZ;AAAR,AACE,wDAAA,wEAAA,zHAACgB,8CAAMJ;;AAEV,yDAAA,zDAACK,6HAEA,WAAAC,SAAkBI;AAAlB,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaP;AAAb,AAAA,kDAAA,oDAAA,2CAAA,uDAAA,mDAAA,kDAAA,yBAAA,iEAAA,mFAAA,oFAAA,2DAAA,mFAAA,qFAAA,gDAKO,iDAAA,qDAAA,tGAACI,8CAAMJ;;AAUf,qBAAA,rBAACW,yEAEA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAL,4BAAAK;UAAA,AAAAJ,4CAAAI,eAAA,jEAAaC;sBAAb,AAAAL,4CAAAI,eAAA,7EAAiBE;oBAAjB,AAAAN,4CAAAI,eAAA,3EAAiCG;AAAjC,AACE,gHAAA,2CAAA,pJAACC,mDAAIH,4JAEF,WAAKI;AAAL,AACE,OAACC,uGAAMD;GAHZ,uEAKG,WAAKE;AAAL,AACE,OAACD,uGAAMC","names":["re_frame.core.reg_event_db","_","my-app2.db/default-db","my-app2.events/toggle-hold","value","vec","cljs.core/not","cljs.core/some","cljs.core.conj","cljs.core.remove","p__21516","vec__21517","cljs.core.nth","db","hold","db-list","new-list","cljs.core.assoc","re_frame.core.reg_event_fx","p__21520","map__21521","cljs.core/--destructure-map","cljs.core.get","event-vec","re-frame.core/reg-fx","p__21522","map__21523","url","success-handler","error-handler","ajax.core.GET","response","cljs.core.print","error"],"sourcesContent":["(ns my-app2.events\r\n  (:require\r\n   [re-frame.core :as re-frame]\r\n   [my-app2.db :as db]\r\n   [ajax.core :refer [GET]]\r\n   ))\r\n\r\n(re-frame/reg-event-db\r\n ::initialize-db\r\n (fn [_ _]\r\n   db/default-db))\r\n\r\n(defn toggle-hold [value vec]\r\n  (cond\r\n    (not (some #{value} vec)) (conj vec value)\r\n    :else (remove #{value} vec)))\r\n\r\n(re-frame/reg-event-db\r\n :hold-clicked\r\n (fn [db [_ hold]]\r\n   (let [db-list (:selected-holds db)\r\n         new-list (toggle-hold hold db-list)]\r\n     (assoc db :selected-holds new-list))))\r\n\r\n(re-frame/reg-event-db\r\n :clear-holds\r\n (fn [db _]\r\n   (assoc db :selected-holds nil)))\r\n\r\n(re-frame/reg-event-fx\r\n :grade-climb\r\n (fn [{:keys [db]} event-vec]\r\n   {:http {:method :get\r\n           :url \"http://httpbin.org/get\"\r\n           :on-success [:process-response]\r\n           :on-fail [:process-fail]}\r\n    :db (assoc db :flag true)}))\r\n\r\n\r\n;; effects below\r\n\r\n;; (re-frame/reg-fx \r\n;;  :http\r\n;;  (fn [value]\r\n;;    (GET \"http://www.google.com\")))\r\n\r\n(re-frame/reg-fx\r\n :http\r\n (fn [{:keys [url success-handler error-handler]}]\r\n   (GET url\r\n     {:handler\r\n      (fn [response]\r\n        (print response))\r\n      :error-handler\r\n      (fn [error]\r\n        (print error))})))"]}