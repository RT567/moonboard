{"version":3,"sources":["my_app2/views.cljs"],"mappings":";AAQA,2BAAA,3BAAMA;AAAN,AAAA,4GAAA,yDAAA,OAAA,uDAAA,2CAAA,gEAAA,eAAA,6DAAA,mFAAA,mFAAA,mDAAA,2CAAA,oDAAA,gBAAA,yDAAA,OAAA,uDAAA,uBAAA,mGAAA,qDAAA,eAAA,qGAAA,uDAAA,zlCACGC,y2BAIYC,uKACAC;;AAGf,8CAAA,9CAAMC,oGAA+BC,IAAIC;AAAzC,AACE,IAAMC,YAAU,kDAAA,LAAKF;AAArB,AAAA,4GAAA,uDAAA,2CAAA,8DAAA,WAAA,8DAAA,8HAAA,6DAAA,mFAAA,mFAAA,mDAAA,2CAAA,oDAAA,aAAA,uDAAA,QAAA,yDAAA,n3BACEJ,iPAEaM,+DACC,mDAAA,NAAKD;;AAKvB,kCAAA,lCAAME,4EAAmBC;AAAzB,AACE,cAAA,oFAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,tIAAMC;AAAN,AACE,mDAAA,WAAAC,iBAAAC,xEAACC;AAAD,AAAM,oDAAAF,8DAAAC;GAAYF,QAAQ,+CAAA,/CAACI,oDAAUL;;AAIzC,iCAAA,jCAAMM,0EAAkBC;AAAxB,AAAA,0FAAA,yDAAA,2CAAA,6DAAA;AAAA,AACuB,8BAAA,mFAAA,1GAACC,+KAAiCD;GADzD,uDAAA,2CAAA,4EAAA,cAAA,sEAAA,MAAA,yDAAA,OAAA,uDAAA;;AAKA,gCAAA,hCAAME,wEAAiBC,MAAMC;AAA7B,AACE,IAAOC,kBAAU,eAAA,uDAAA,AAAAC,tEAACC,8DAAOJ,wBAAQC;IAC1BI,wBAAsB,mCAAA,UAAA,3BAAIH;AADjC,AAAA,0FAAA,mDAAA,2CAAA,oDAAA,sBAAA,yDAAA,OAAA,uDAAA,OAAA,uDAAA,2CAAA,iEAIwBG;;AAG1B,yCAAA,zCAAMC,0FAA0BpB,IAAIqB,YAAYP,MAAMC;AAAtD,AAAA,4GAAA,uDAAA,SAAA,uDAAA,2CAAA,8DAAA,WAAA,qDAAA,MAAA,6HAAA,6DAAA,mFAAA,mGAAA,qDAAA,eAAA,mGAAA,sIAAA,r9BACGnB,4WAIa,kDAAA,LAAKI,+PACNH,uKACAA,qEAAiB,0DAAA,bAAKwB,uHACtBR,8BAAgBC,MAAMC;;AAErC,yCAAA,zCAAMO,0FAA0BlB;AAAhC,AACE,IAAMmB,uBAAqB,AAACpB,gCAAkBC;AAA9C,kEACM,4CAAA,WAAAoB,vDAAChB,7CACD,AAACiB,rBACD,OAACC;AAFD,AAAM,oDAAA,0HAAAF,vKAACC,gIAAMf;GAAqBa,sBAClC,mGAAA,qDAAA,rEAAO1B;;AAGf,6BAAA,7BAAM8B,kEAAc3B,IAAI4B,UAAUb;AAAlC,AACE,IAAMc,gBAAc,6CAAA,7CAACC,kDAAQ,kBAAA,WAAAC,7BAACC;AAAD,AAAU,QAAAD,mBAAA;GAAV;AAA7B,AACE,mDAAA,WAAAE,iBAAAC,xEAAC1B;AAAD,AAAM,kDAAAyB,iBAAAC,5DAACd,uCAAyBpB,sCAAUe;GAAIc,cAAc,AAAC1B,gCAAkByB;;AAEnF,kDAAA,lDAAMO,4GAAmCnC,IAAI4B;AAA7C,AAAA,4GAAA,uDAAA,QAAA,uDAAA,2CAAA,8DAAA,WAAA,qHAAA,qDAAA,cAAA,pbACGhC,gTAGa,kDAAA,LAAKI,oJAER,AAACsB,uCAAyBM;;AAEvC,iDAAA,jDAAMQ,0GAAkCpC,IAAI4B,UAAUb;AAAtD,AAAA,4GAAA,lBACGnB,+EACU,AAAC+B,2BAAa3B,IAAI4B,UAAUb;;AAKzC,iDAAA,jDAAMsB,0GAAkCrC;AAAxC,AACE,IAAMsC,oBAAkB,6CAAA,7CAACR,kDAAQ,kBAAA,WAAAS,7BAACP;AAAD,AAAU,QAAAO,mBAAA;GAAS,OAAA,NAAGvC;IACjDwC,cAAY,AAACC,kBAAQ,8CAAA,IAAA,lDAACC;AAD5B,AAAA,4GAAA,lBAEGC,+EACU,AAACjB,cAAI,AAAClB,4CAAI2B,gDAAkCG,kBAAkBE;;AAK7E,gDAAA,hDAAMI,wGAAiC5C;AAAvC,AACE,IAAMsC,oBAAkB,6CAAA,7CAACR,kDAAQ,kBAAA,WAAAe,7BAACb;AAAD,AAAU,QAAAa,mBAAA;GAAS,OAAA,NAAG7C;IACjDwC,cAAY,AAACC,kBAAQ,8CAAA,IAAA,lDAACC;IACtB3B,KAAG,sDAAA,mFAAA,zIAAC+B;AAFV,AAAA,4GAAA,lBAGGH,+EACU,AAACjB,cAAI,4CAAA,WAAAqB,iBAAAC,xEAACxC;AAAD,AAAM,sDAAAuC,iBAAAC,hEAACZ,iFAAuCrB;GAAIuB,kBAAkBE;;AAExF,yBAAA,zBAAMS;AAAN,AACE,IAAMlC,KAAG,sDAAA,mFAAA,zIAAC+B;AAAV,AAAA,0FACGI,cAASnC;;AAEd,2BAAA,3BAAMoC;AAAN,AAAA,4GAAA,qDAAA,OAAA,2DAAA,yDAAA,uDAAA,4DAAA,6DAAA,mFAAA,qGAAA,mQAAA,yDAAA,OAAA,uDAAA,yDAAA,6DAAA,oFAAA,mGAAA,qDAAA,eAAA,oHAAA,mGAAA,qDAAA,eAAA,qGAAA,uDAAA,0DAAA,mGAAA,qDAAA,eAAA,qGAAA,iDAAA,OAAA,uDAAA,yDAAA,6DAAA,mFAAA,sGAAA,uDAAA,cAAA,6DAAA,ljFACGvD,whBAIY+C,sEACU,EAAA,GAAAS,cAAA,KAAA,2CAAA,sDAAA,qBAAA,oDAAA,iaAGEvD,uKACAF,oHACAE,uKACAC,sNACAD,uKACA8C,6ZAGYU;AAjBvC,AAiBqF,8BAAA,mFAAA,1GAACzC;WAjBtF,sGAAA,uDAAA,cAAA,6DAAA,rJAkBuCyC;AAlBvC,AAkBqF,8BAAA,mFAAA,1GAACzC;2BAlBtF,kHAAA,+HAAA,MAAA,aAAA,iIAAA,cAAA,kIAAA,lcAmB2BqC,kHAEAlD,kJACA6C,+IACAP","names":["my-app2.views/top-banner","re-com.core/h-box","re-com.core/gap","re-com.core/title","my-app2.views/image-with-hardcoded-location","top","left","topstring","my-app2.views/create-row-coords","number","letters","p1__21518#","p2__21519#","cljs.core.map","cljs.core.repeat","my-app2.views/invisible-button","place","re-frame.core/dispatch","my-app2.views/toggleable-ring","coord","db","selected?","cljs.core/deref","cljs.core/some","string-representation","my-app2.views/specifically-placed-ring","shift-right","my-app2.views/invisible-row-of-buttons","vec-of-coords-in-row","p1__21520#","cljs.core.conj","cljs.core/vec","my-app2.views/row-of-rings","rownumber","pixel-offsets","cljs.core.take","p1__21521#","cljs.core/iterate","p1__21522#","p2__21523#","my-app2.views/create-h-box-of-invisible-buttons","my-app2.views/create-h-box-of-toggleable-rings","my-app2.views/entire-invisible-grid-of-buttons","row-pixel-heights","p1__21524#","row-numbers","cljs.core/reverse","cljs.core.range","re-com.core/v-box","my-app2.views/entire-grid-of-toggleable-rings","p1__21525#","re_frame.core.subscribe","p1__21526#","p2__21527#","my-app2.views/db-value","re-com.core/p","my-app2.views/main-panel","js/goog.DEBUG","re-com.core/button"],"sourcesContent":["(ns my-app2.views\r\n  (:require\r\n   [re-frame.core :as re-frame]\r\n   [re-com.core :as re-com :refer [at]]\r\n   [my-app2.subs :as subs]\r\n   [reagent.core :as reagent]\r\n   [my-app2.db :as db]))\r\n\r\n(defn top-banner []\r\n  [re-com/h-box\r\n   :height \"60px\"\r\n   :style {:font-size \"20px\"} ;; :background-color \"#ffef45\" :color \"#33c4f5\" \r\n   :children [[:img {:src \"nice-size.png\" :height \"50px\" :width \"80px\"}]\r\n              [re-com/gap :size \"30px\"]\r\n              [re-com/title :label \"MoonGrader\"]]])\r\n\r\n;; background moonboard image, hardcoded size and location\r\n(defn image-with-hardcoded-location [top left]\r\n  (let [topstring (str top \"px\")]\r\n   [re-com/h-box\r\n    :style {:position \"absolute\"\r\n            :top topstring\r\n            :left (str left \"%\")}\r\n    :children [[:img {:src \"mb2019.jpg\" :width \"400px\" :height \"600px\"}]]]))\r\n\r\n;; helper function for creating rows, given some number, x spits out \r\n;; Ax Bx, to Kx\r\n(defn create-row-coords [number]\r\n  (let [letters [\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\"]]\r\n    (map #(str %1 %2) letters (repeat 11 number))))\r\n\r\n;; create one of the buttons which are overlayed onto the image\r\n;; does no need position as it is placed within a row which has position\r\n(defn invisible-button [place]\r\n  [:button {:on-click #(re-frame/dispatch [:hold-clicked place])\r\n            :style {:background-color \"transparent\" :border-width \"0px\" :height \"30px\" :width \"30.7px\"}}])\r\n\r\n;; creates a ring, only visible if within the selected list of holds from :selected-holds (represented by db)\r\n(defn toggleable-ring [coord db]\r\n  (let  [selected? (some #{coord} @db)\r\n         string-representation (if selected? \"visible\" \"hidden\")]\r\n    [:img\r\n     {:src \"blue-ring-thick.png\" :height \"45px\" :width \"45px\"\r\n      :style {:visibility string-representation}}]))\r\n\r\n;have to do funky things to allow for overlap of rings\r\n(defn specifically-placed-ring [top shift-right coord db]\r\n  [re-com/h-box\r\n   :width \"1000px\"\r\n   :style {:position \"absolute\"\r\n           :left \"20%\"\r\n           :top (str top \"px\")}\r\n   :children [[re-com/gap :size \"35px\"]\r\n              [re-com/gap :size (str shift-right \"px\")] ;35px\r\n              [toggleable-ring coord db]]])\r\n\r\n(defn invisible-row-of-buttons [number]\r\n  (let [vec-of-coords-in-row (create-row-coords number)]\r\n    (-> (map #(conj [invisible-button] %) vec-of-coords-in-row)\r\n        (conj [re-com/gap :size \"44px\"])\r\n        (vec))))\r\n\r\n(defn row-of-rings [top rownumber db]\r\n  (let [pixel-offsets (take 11 (iterate #(+ % 30.8) 0))]\r\n    (map #(specifically-placed-ring top %1 %2 db) pixel-offsets (create-row-coords rownumber))))\r\n\r\n(defn create-h-box-of-invisible-buttons [top rownumber]\r\n  [re-com/h-box\r\n   :width \"400px\"\r\n   :style {:position \"absolute\"\r\n           :top (str top \"px\")\r\n           :left \"20%\"}\r\n   :children (invisible-row-of-buttons rownumber)])\r\n\r\n(defn create-h-box-of-toggleable-rings [top rownumber db]\r\n  [re-com/h-box\r\n   :children (row-of-rings top rownumber db)])\r\n\r\n;; creates a series of hboxes of invisible buttons resulting in a grid like structure\r\n;; note: the top value is the offset further down the image the buttons need to start \r\n;; compared to the top value provided for the hard coded image\r\n(defn entire-invisible-grid-of-buttons [top]\r\n  (let [row-pixel-heights (take 18 (iterate #(+ % 30) (+ top 40)))\r\n        row-numbers (reverse (range 1 19))]\r\n    [re-com/v-box\r\n     :children (vec (map create-h-box-of-invisible-buttons row-pixel-heights row-numbers))]))\r\n\r\n;; creates a series of hboxes of the toggleable rings, accumulating in a grid\r\n;; note: the top value is the offset further down the image the buttons need to start \r\n;; compared to the top value provided for the hard coded image\r\n(defn entire-grid-of-toggleable-rings [top]\r\n  (let [row-pixel-heights (take 18 (iterate #(+ % 30) (+ top 30)))\r\n        row-numbers (reverse (range 1 19))\r\n        db (re-frame/subscribe [::subs/db])]\r\n    [re-com/v-box\r\n     :children (vec (map #(create-h-box-of-toggleable-rings %1 %2 db) row-pixel-heights row-numbers))]))\r\n\r\n(defn db-value []\r\n  (let [db (re-frame/subscribe [::subs/db])]\r\n    [re-com/p db]))\r\n\r\n(defn main-panel []\r\n  [re-com/h-box\r\n   :size \"auto\"\r\n   :justify :center\r\n   :align :stretch\r\n   :children [[re-com/v-box\r\n               :src      (at)\r\n               :height   \"100%\"\r\n               :align :center\r\n               :children [[re-com/gap :size \"30px\"]\r\n                          [top-banner]\r\n                          [re-com/gap :size \"30px\"]\r\n                          [re-com/title :label \"Use machine learning to grade MoonBoard climbs!\"]\r\n                          [re-com/gap :size \"30px\"]\r\n                          [re-com/v-box\r\n                           :gap \"10px\"\r\n                           :align :center\r\n                           :children [[re-com/button :label \"grade climb\" :on-click #(re-frame/dispatch [:scrnshot])]\r\n                                      [re-com/button :label \"clear holds\" :on-click #(re-frame/dispatch [:clear-holds])]]]\r\n                          [db-value]\r\n\r\n                          [image-with-hardcoded-location 300 20] ;; top and left, not implemented for others...\r\n                          [entire-grid-of-toggleable-rings 300]\r\n                          [entire-invisible-grid-of-buttons 300]]]]])"]}